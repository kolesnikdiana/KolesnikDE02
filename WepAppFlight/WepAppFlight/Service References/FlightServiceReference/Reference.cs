//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WepAppFlight.FlightServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flight", Namespace="http://schemas.datacontract.org/2004/07/WCFSoapServiceAirport.Model")]
    [System.SerializableAttribute()]
    public partial class Flight : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AirlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FlightIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FlightNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Airline {
            get {
                return this.AirlineField;
            }
            set {
                if ((object.ReferenceEquals(this.AirlineField, value) != true)) {
                    this.AirlineField = value;
                    this.RaisePropertyChanged("Airline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FlightId {
            get {
                return this.FlightIdField;
            }
            set {
                if ((this.FlightIdField.Equals(value) != true)) {
                    this.FlightIdField = value;
                    this.RaisePropertyChanged("FlightId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightNumber {
            get {
                return this.FlightNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightNumberField, value) != true)) {
                    this.FlightNumberField = value;
                    this.RaisePropertyChanged("FlightNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string To {
            get {
                return this.ToField;
            }
            set {
                if ((object.ReferenceEquals(this.ToField, value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FlightServiceReference.IFlightService")]
    public interface IFlightService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllFligths", ReplyAction="http://tempuri.org/IFlightService/GetAllFligthsResponse")]
        WepAppFlight.FlightServiceReference.Flight[] GetAllFligths();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllFligths", ReplyAction="http://tempuri.org/IFlightService/GetAllFligthsResponse")]
        System.Threading.Tasks.Task<WepAppFlight.FlightServiceReference.Flight[]> GetAllFligthsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/AddFlight", ReplyAction="http://tempuri.org/IFlightService/AddFlightResponse")]
        void AddFlight(WepAppFlight.FlightServiceReference.Flight f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/AddFlight", ReplyAction="http://tempuri.org/IFlightService/AddFlightResponse")]
        System.Threading.Tasks.Task AddFlightAsync(WepAppFlight.FlightServiceReference.Flight f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteFlight", ReplyAction="http://tempuri.org/IFlightService/DeleteFlightResponse")]
        void DeleteFlight(WepAppFlight.FlightServiceReference.Flight f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteFlight", ReplyAction="http://tempuri.org/IFlightService/DeleteFlightResponse")]
        System.Threading.Tasks.Task DeleteFlightAsync(WepAppFlight.FlightServiceReference.Flight f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/FindFlights", ReplyAction="http://tempuri.org/IFlightService/FindFlightsResponse")]
        WepAppFlight.FlightServiceReference.Flight[] FindFlights(string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/FindFlights", ReplyAction="http://tempuri.org/IFlightService/FindFlightsResponse")]
        System.Threading.Tasks.Task<WepAppFlight.FlightServiceReference.Flight[]> FindFlightsAsync(string a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/SortByPrice", ReplyAction="http://tempuri.org/IFlightService/SortByPriceResponse")]
        WepAppFlight.FlightServiceReference.Flight[] SortByPrice();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/SortByPrice", ReplyAction="http://tempuri.org/IFlightService/SortByPriceResponse")]
        System.Threading.Tasks.Task<WepAppFlight.FlightServiceReference.Flight[]> SortByPriceAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFlightServiceChannel : WepAppFlight.FlightServiceReference.IFlightService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FlightServiceClient : System.ServiceModel.ClientBase<WepAppFlight.FlightServiceReference.IFlightService>, WepAppFlight.FlightServiceReference.IFlightService {
        
        public FlightServiceClient() {
        }
        
        public FlightServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FlightServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FlightServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FlightServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WepAppFlight.FlightServiceReference.Flight[] GetAllFligths() {
            return base.Channel.GetAllFligths();
        }
        
        public System.Threading.Tasks.Task<WepAppFlight.FlightServiceReference.Flight[]> GetAllFligthsAsync() {
            return base.Channel.GetAllFligthsAsync();
        }
        
        public void AddFlight(WepAppFlight.FlightServiceReference.Flight f) {
            base.Channel.AddFlight(f);
        }
        
        public System.Threading.Tasks.Task AddFlightAsync(WepAppFlight.FlightServiceReference.Flight f) {
            return base.Channel.AddFlightAsync(f);
        }
        
        public void DeleteFlight(WepAppFlight.FlightServiceReference.Flight f) {
            base.Channel.DeleteFlight(f);
        }
        
        public System.Threading.Tasks.Task DeleteFlightAsync(WepAppFlight.FlightServiceReference.Flight f) {
            return base.Channel.DeleteFlightAsync(f);
        }
        
        public WepAppFlight.FlightServiceReference.Flight[] FindFlights(string a) {
            return base.Channel.FindFlights(a);
        }
        
        public System.Threading.Tasks.Task<WepAppFlight.FlightServiceReference.Flight[]> FindFlightsAsync(string a) {
            return base.Channel.FindFlightsAsync(a);
        }
        
        public WepAppFlight.FlightServiceReference.Flight[] SortByPrice() {
            return base.Channel.SortByPrice();
        }
        
        public System.Threading.Tasks.Task<WepAppFlight.FlightServiceReference.Flight[]> SortByPriceAsync() {
            return base.Channel.SortByPriceAsync();
        }
    }
}
